import bcrypt
import psycopg2
import smtplib
import random
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
def get_db_connection():
    return psycopg2.connect(
        dbname="db",       # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user="postgres",   # –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password="root",   # –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        host="localhost",  # –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        port="5432"        # –ü–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    )

# üìå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 6-–∑–Ω–∞—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
def generate_reset_token():
    return str(random.randint(100000, 999999))

def send_reset_email(user_email, reset_token):
    sender_email = "project_404@mail.ru"
    password = "jUxdtwMhVRtFxid4VirS "  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!
    smtp_server = "smtp.mail.ru"
    smtp_port = 587  # –ü–æ—á—Ç–∞ Mail.ru —Ç—Ä–µ–±—É–µ—Ç 587 –¥–ª—è TLS

    subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"
    body = f"–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {reset_token}"

    msg = MIMEMultipart()
    msg["From"] = sender_email
    msg["To"] = user_email
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å TLS
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()  # –í–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        server.login(sender_email, password)  # –õ–æ–≥–∏–Ω–∏–º—Å—è
        server.sendmail(sender_email, user_email, msg.as_string())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        server.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

        print(f"‚úÖ Email —Å —Ç–æ–∫–µ–Ω–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user_email}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")



# üìå –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
def reset_password(email, input_token, new_password):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT password_reset_token FROM users WHERE email = %s", (email,))
    result = cursor.fetchone()
    
    if not result:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    stored_token = result[0]
    
    # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if stored_token != input_token:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return False
    
    # üìå –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    
    # üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE users SET password = %s WHERE email = %s", (hashed_password, email))
    conn.commit()
    
    # üìå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    cursor.close()
    conn.close()
    
    print("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω")
    return True

# üìå –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
def request_password_reset(email):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    cursor.execute("SELECT id FROM users WHERE email = %s", (email,))
    user = cursor.fetchone()
    
    if not user:
        print("‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î
    reset_token = generate_reset_token()
    cursor.execute("UPDATE users SET password_reset_token = %s WHERE email = %s", (reset_token, email))
    conn.commit()
    
    # üìå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    cursor.close()
    conn.close()
    
    # üìå –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å —Ç–æ–∫–µ–Ω–æ–º —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    send_reset_email(email, reset_token)
    return True

# üìå –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã (—Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è)
if __name__ == "__main__":
    user_email = "Eg_234@mail.ru"  # –ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    
    # üìå 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ email
    request_password_reset(user_email)
    
    # üìå 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    input_token = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: ")
    new_password = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
    
    # üìå 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    reset_password(user_email, input_token, new_password)
